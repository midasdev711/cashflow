import json
import re
from datetime import date, datetime
from django.core.exceptions import ObjectDoesNotExist
from django.forms import inlineformset_factory
from django.http import Http404, HttpResponseRedirect, HttpResponseBadRequest, HttpResponseForbidden, \
    HttpResponseServerError
from django.shortcuts import render
from django.urls import reverse
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.contrib import messages
import requests

from cashflow import dauth
from expenses import models

"""
Lists all expenses.
"""
def expense_overview(request):
    committee = request.GET.get('committee')
    expenses_list = models.Expense.objects.order_by('verification', '-id')
    if committee != None and committee != '':
        expenses_list = expenses_list.filter(expensepart__committee_name=committee)
    expenses_list = expenses_list.all()
    paginator = Paginator(expenses_list, 25)
    page = request.GET.get('page')

    try:
        expenses = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        expenses = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        expenses = paginator.page(paginator.num_pages)

    if request.method == 'GET':
        if len(dauth.get_permissions(request.user)) > 0:
            return render(request, 'expenses/expense_list.html', {
                'expenses': expenses,
                'committees': json.dumps([x['committee_name'] for x in models.ExpensePart.objects.values('committee_name').distinct()]),
                'committee': committee if committee != None else ''
            })
    else:
        raise Http404()

"""
Shows form for adding new expense and takes care of 
the post request generated by it.
"""
def new_expense(request):
    if request.method == 'GET':
        return render(request, 'expenses/new_expense.html')
    elif request.method == 'POST':
        if len((request.FILES.getlist('files'))) < 1:
            messages.error(request, 'Du måste ladda upp minst en fil som verifikat')
            return HttpResponseRedirect(reverse('expenses-show-new'))

        if datetime.now() < datetime.strptime(request.POST['expense-date'], '%Y-%m-%d'):
            messages.error(request, 'Du har angivit ett datum i framtiden')
            return HttpResponseRedirect(reverse('expenses-show-new'))

        expense = models.Expense(
            owner=request.user.profile,
            expense_date=request.POST['expense-date'],
            description=request.POST['expense-description'],
            confirmed_by=None
        )
        expense.save()

        for uploaded_file in request.FILES.getlist('files'):
            file = models.File(belonging_to=expense, file=uploaded_file)
            file.save()

        for idx, budgetLineId in enumerate(request.POST.getlist('budgetLine[]')):
            response = requests.get("https://budget.datasektionen.se/api/budget-lines/{}".format(budgetLineId))
            budgetLine = response.json()
            models.ExpensePart(
                expense=expense,
                budget_line_id=budgetLine['id'],
                budget_line_name=budgetLine['name'],
                cost_centre_name=budgetLine['cost_centre']['name'],
                cost_centre_id=budgetLine['cost_centre']['id'],
                committee_name=budgetLine['cost_centre']['committee']['name'],
                committee_id=budgetLine['cost_centre']['committee']['id'],
                amount=request.POST.getlist('amount[]')[idx]
            ).save()

        return HttpResponseRedirect(reverse('expenses-show-new-binder', kwargs={'pk': expense.id}))
    else:
        raise Http404()


"""
Catches error on creating expense.
"""
def expense_in_binder_alert(request, pk):
    if request.method == 'GET':
        try:
            expense = models.Expense.objects.get(pk=int(pk))
            return render(request, 'expenses/expense_in_binder.html', {'expense': expense})
        except ObjectDoesNotExist:
            return HttpResponseServerError("Något gick fel när du försökte skapa utlägget :(")

    else:
        raise Http404()


"""
Shows form for editing expense and handles the post request on submit.
"""
def edit_expense(request, pk):
    try:
        expense = models.Expense.objects.get(pk=pk)
        if expense.owner.user.username != request.user.username:
            return HttpResponseForbidden()
        if request.method == 'POST':
            messages.success(request, 'Kvittot ändrades')
            expense.description = request.POST['description']
            expense.expense_date = request.POST['expense_date']
            expense.save()

            for idx, expensePartId in enumerate(request.POST.getlist('expensePartId[]')):
                budgetLines = request.POST.getlist('budgetLine[]')
                response = requests.get("https://budget.datasektionen.se/api/budget-lines/{}".format(budgetLines[idx]))
                budgetLine = response.json()

                if (expensePartId == '-1'):
                    expense_part = models.ExpensePart(
                        expense=expense,
                        budget_line_id=budgetLine['id'],
                        budget_line_name=budgetLine['name'],
                        cost_centre_name=budgetLine['cost_centre']['name'],
                        cost_centre_id=budgetLine['cost_centre']['id'],
                        committee_name=budgetLine['cost_centre']['committee']['name'],
                        committee_id=budgetLine['cost_centre']['committee']['id'],
                        amount=request.POST.getlist('amount[]')[idx]
                    )
                    expense_part.save()
                else:
                    expense_part = models.ExpensePart.objects.get(pk=expensePartId)
                    expense_part.expense = expense
                    expense_part.budget_line_id = budgetLine['id']
                    expense_part.budget_line_name = budgetLine['name']
                    expense_part.cost_centre_name = budgetLine['cost_centre']['name']
                    expense_part.cost_centre_id = budgetLine['cost_centre']['id']
                    expense_part.committee_name = budgetLine['cost_centre']['committee']['name']
                    expense_part.committee_id = budgetLine['cost_centre']['committee']['id']
                    expense_part.amount = request.POST.getlist('amount[]')[idx]
                    expense_part.save()

            return HttpResponseRedirect(reverse('expenses-show', kwargs={'pk': pk}))
        else:
            return render(request, 'expenses/edit_expense.html', {
                "expense": expense,
                "expenseparts": expense.expensepart_set.all()
            })
    except ObjectDoesNotExist:
        raise Http404("Utlägget finns inte")

"""
Shows form for editing expense verification and handles the post request on submit.
"""
def edit_expense_verification(request, pk):
    try:
        expense = models.Expense.objects.get(pk=pk)
        if not may_account(request, expense):
            return HttpResponseForbidden("Du har inte rättigheter att bokföra det här")
        if expense.reimbursement is None:
            return HttpResponseBadRequest("Du kan inte bokföra det här utlägget än")

        if request.method == 'POST':
            expense.verification = request.POST['verification']
            expense.save()

            comment = models.Comment(
                author=request.user.profile,
                expense=expense,
                content="Ändrade verifikationsnumret till: " + expense.verification
            )
            comment.save()

            return HttpResponseRedirect(reverse('expenses-show', kwargs={'pk': expense.id}))
        else:
            return render(request, 'expenses/edit_expense_verification.html', {
                "expense": expense,
                "expense_parts": expense.expensepart_set.all()
            })
    except ObjectDoesNotExist:
        raise Http404("Utlägget finns inte")


"""
Confirms expense.
"""
def confirm_expense(request, pk):
    if request.method == 'POST':
        try:
            expense = models.Expense.objects.get(pk=pk)

            if not dauth.has_permission('confirm', request):
                return HttpResponseForbidden("Du har inte rättigheterna för att se den här sidan")

            expense.confirmed_by = request.user
            expense.confirmed_at = date.today()
            expense.save()

            comment = models.Comment(
                expense=expense,
                author=request.user.profile,
                content='Jag bekräftar att kvittot finns i pärmen.'
            )
            comment.save()

            return HttpResponseRedirect(reverse('expenses-action-confirm'))
        except ObjectDoesNotExist:
            raise Http404("Utlägget finns inte")
    else:
        raise Http404()



"""
Handles delete expense request.
"""
def delete_expense(request, pk):
    try:
        expense = models.Expense.objects.get(pk=pk)
        if expense.owner.user.username != request.user.username and not(expense.expensepart_set.first().budget_line.cost_centre.committee.name.lower() in request.user.profile.may_attest()):
            return HttpResponseForbidden()
        if request.method == 'GET':
            return render(request, 'expenses/delete_expense.html', {
                "expense": expense
            })
        if request.method == 'POST':
            if expense.reimbursement is not None:
                return HttpResponseBadRequest('Du kan inte ta bort ett kvitto som är återbetalt!')
            expense.delete()
            messages.success(request, 'Kvittot raderades.')
            return HttpResponseRedirect(reverse('expenses-index'))

    except ObjectDoesNotExist:
        raise Http404("Utlägget finns inte")


"""
Shows details about expense.
"""
def get_expense(request, pk):
    try:
        pk = int(pk)
        expense = models.Expense.objects.get(pk=pk)

        if not may_view_expense(request, expense):
            return HttpResponseForbidden()

        return render(request, 'expenses/expense.html', {
            'expense': expense,
            'may_account': may_account(request, expense)
        })
    except ObjectDoesNotExist:
        raise Http404("Utlägget finns inte")


"""
Adds a new comment to expense.
"""
def new_comment(request, expense_pk):
    try:
        expense = models.Expense.objects.get(pk=int(expense_pk))
        if not may_view_expense(request, expense):
            return HttpResponseForbidden()

        if request.method == 'POST':
            if re.match('^\s*$', request.POST['content']):
                return HttpResponseRedirect(reverse('expenses-show', kwargs={'pk': expense_pk}))
            comment = models.Comment(
                expense=expense,
                author=request.user.profile,
                content=request.POST['content']
            )
            comment.save()
            return HttpResponseRedirect(reverse('expenses-show', kwargs={'pk': expense_pk}))
        else:
            raise Http404()
    except ObjectDoesNotExist:
        raise Http404("Utlägget finns inte")


"""
Sets verification for expense.
"""
def set_verification(request, expense_pk):
    if request.method == 'POST':
        try:
            expense = models.Expense.objects.get(pk=expense_pk)
            if not may_account(request, expense):
                return HttpResponseForbidden("Du har inte rättigheter att bokföra det här")
            if expense.reimbursement is None:
                return HttpResponseBadRequest("Du kan inte bokföra det här utlägget än")

            expense.verification = request.POST['verification']
            expense.save()

            comment = models.Comment(
                author=request.user.profile,
                expense=expense,
                content="Bokförde med verifikationsnumret: " + expense.verification
            )
            comment.save()

            return HttpResponseRedirect(reverse('expenses-action-accounting'))
        except ObjectDoesNotExist:
            raise Http404("Utlägget finns inte")
    else:
        raise Http404()


"""
Returns true if user may view expense, ie user can pay it, attest it, account it or owns it.
"""
def may_view_expense(request, expense):
    if expense.owner.user.username == request.user.username or dauth.has_permission('pay', request):
        return True
    for committee in expense.committees():
        if dauth.has_permission('attest-' + committee.name.lower(), request) or \
                dauth.has_permission('accounting-' + committee.name.lower(), request):
            return True

    return False

"""
Returns true if user may account the expense.
"""
def may_account(request, expense):
    for committee in expense.committees():
        if committee['committee_name'].lower() in request.user.profile.may_account():
            return True

    return False
